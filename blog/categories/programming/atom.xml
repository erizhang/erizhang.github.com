<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Actionary]]></title>
  <link href="http://blog.zhangliaoyuan.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://blog.zhangliaoyuan.com/"/>
  <updated>2016-11-23T17:18:59+08:00</updated>
  <id>http://blog.zhangliaoyuan.com/</id>
  <author>
    <name><![CDATA[Eric Zhang]]></name>
    <email><![CDATA[zhang.lyuan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploding Fake in Unit Test]]></title>
    <link href="http://blog.zhangliaoyuan.com/blog/2016/10/24/exploding-fake-in-unit-test/"/>
    <updated>2016-10-24T21:22:49+08:00</updated>
    <id>http://blog.zhangliaoyuan.com/blog/2016/10/24/exploding-fake-in-unit-test</id>
    <content type="html"><![CDATA[<h2>What&rsquo;s <strong>exploding fake</strong>?</h2>

<p>let&rsquo;s see below source code firstly.</p>

<pre><code class="c">int a_stub(){
    fail("Boom!!! I shouldn't have been called!!!");
    return 0;
}
</code></pre>

<p>Even more popular:
<code>c
int a_stub(){
    fail("Hey!!! I'm actually called! Now you can think about "\
    "what behaviour do you want me to have. Do you want me to "\
    "return a specific value?");
    return 0;
}
</code></p>

<p>So where this <strong>exploding fake</strong> will be used? For example, you would like to add unit test case for legacy code, in order to pass the compilation, you have to add hundreds of stubs, but you do NOT have enough time to check what&rsquo;s the stub purpose and return value, so you can make the stub be self exploding first. And then you can pass the compilation and add unit test case. Once there is stub exploding, then to check whether the stub shall be called, shall the stub have behaviour, and what&rsquo;s return value.</p>

<h2>Automatically generate exploding fake?</h2>

<p>As we know, lots of stubs are needed during unit testing for legacy code, is there any easy way to generate exploding fake automatically?</p>

<p>Because the stub is the dependency&rsquo;s function signature, actually, so, if you can get the dependancies&#8217; signature, that will be easy to generate, for example, tool <a href="https://github.com/terryyin/lizard.git" title="lizard repo">lizard</a> could read all the functions signature, it will be good way to write a script to generate <strong>exploding fake</strong>.</p>

<p>Actually, James Grenning has already implement such script for the <strong>exploding fake</strong> generation: <a href="https://github.com/jwgrenning/cpputest-starter-project/tree/master/tests/exploding-fakes" title="exploding fakes">source>></a></p>

<h2>Does make sense to making exploding fake for dynamic programming language?</h2>

<p>No, because the dynamic programming language is not complied and linked, it will be naturally failed once the dependency missing. In another words, it&rsquo;s self-exploding type, :p</p>

<p>&ndash; EOF &ndash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize Your Terminal]]></title>
    <link href="http://blog.zhangliaoyuan.com/blog/2015/12/05/customize-the-terminal/"/>
    <updated>2015-12-05T22:46:11+08:00</updated>
    <id>http://blog.zhangliaoyuan.com/blog/2015/12/05/customize-the-terminal</id>
    <content type="html"><![CDATA[<h2>1. install <code>zsh</code>:</h2>

<pre><code># install zsh-5.0.7
# prerequisite: gcc ncurses-devel readline-devel pcre-devel zlib-devel
curl -L http://jaist.dl.sourceforge.net/project/zsh/zsh/5.0.7/zsh-5.0.7.tar.bz2 | tar jx
cd zsh-5.0.7/
./configure --prefix=/usr/local/zsh/5.0.7 --enable-cap --enable-pcre --enable-multibyte --disable-gdbm
make
sudo make install
sudo alternatives --install /usr/local/bin/zsh zsh /usr/local/zsh/5.0.7/bin/zsh 50000
</code></pre>

<h2>2. set the default shell to <code>zsh</code>:</h2>

<h3>2.1 update the <code>/etc/shells</code>, append <code>zsh</code> path there.</h3>

<pre><code>/bin/sh
/bin/bash
/sbin/nologin
/usr/bin/sh
/usr/bin/bash
/usr/sbin/nologin
/bin/tcsh
/bin/csh
/usr/local/bin/zsh
/usr/local/zsh
</code></pre>

<h3>2.2 change the default shell to <code>zsh</code></h3>

<pre><code>sudo chsh -s `which zsh`
sudo shutdown -r 0
</code></pre>

<h2>3. Install the <code>oh-my-zsh</code></h2>

<p><a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a>
<code>
sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
</code></p>

<h2>4. cutomize the theme of terminal</h2>

<p><a href="http://www.if-not-true-then-false.com/2012/solarized-linux/">http://www.if-not-true-then-false.com/2012/solarized-linux/</a></p>

<pre><code>git clone https://github.com/sigurdga/gnome-terminal-colors-solarized.git
gnome-terminal-colors-solarized/install.sh
</code></pre>

<p>&ndash; EOF &ndash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Successfully Host and Facilitate Coderetreat]]></title>
    <link href="http://blog.zhangliaoyuan.com/blog/2015/11/12/how-to-successfully-host-and-facilitate-coderetreat/"/>
    <updated>2015-11-12T17:06:08+08:00</updated>
    <id>http://blog.zhangliaoyuan.com/blog/2015/11/12/how-to-successfully-host-and-facilitate-coderetreat</id>
    <content type="html"><![CDATA[<p><img src="/images/2015-11-12-how-to-successfully-host-and-facilitate-coderetreat/pair-work.png" title="coderetreat pair work" alt="Alt text" /></p>

<h2>1. What&rsquo;s coderetreat</h2>

<p>Coderetreat is a day-long, intensive practice event, focusing on the fundamentals of software development and design. By providing developers the opportunity to take part in focused practice away from the pressures of &lsquo;getting things done&rsquo;, the coderetreat format has proven itself to be a highly effective means of skill improvement. You can visit <a href="http://www.coderetreat.org/" title="coderetreat">coderetreat.org</a> for details.</p>

<h2>2. What consists of  the coderetreat day?</h2>

<p>The day-long activity including: beginning, coding sessions and ending. Consider the time arrangement, there will be at least 5 sessions during that day. Beginning is reserved to introduce the coderetreat activity, sponsor, and the rules etc. The coding sessions are the major part of coderetreat day, the details will be described below. And ending part is used to retrospective of day-long whole coderetreat activity.</p>

<h2>3. What&rsquo;s consists of the session?</h2>

<p>In each session, there basically including below steps:</p>

<h3>Step 1. Delete the source code what is written in previous sessions</h3>

<p>I often was asked why we programmer shall delete the source code what is written in previous session by them, they treated the source code as asset, programmer always makes the increase the source code size, but has less opportunity to delete source code.  And remove the source code permanently helps programmers enter in new session with brand new status, new session with new constraint will make programmer has new idea.</p>

<h3>Step 2. Add new constraint in constraints-list</h3>

<p>The most interested part in coderetreat is coding under constraints. Image that, if your hands are tied, you will consider use other parts of your body. Before prepare coderetreat, facilitator shall prepare enough coding constraints carefully. Add one constraint in one session, current session shall be follow previous all constraints and new added in current session. For example, in the first session, the constraint is &ldquo;TDD is required&rdquo;, and in the second session, there is new constraint called &ldquo;No local/global variable used&rdquo;, it means in the second session, programmers shall follow two constraints.</p>

<p>Add constraints can help programmer programming in different solution, one constraint would help programmer to realize his/her potential well.</p>

<p>Some constraint examples:</p>

<ul>
<li><strong>TDD is required</strong></li>
<li><strong>The LoC of each function shall be less than 6</strong></li>
<li><strong>No conditional statement used</strong>, for example, &ldquo;<code>if</code>, <code>if else</code>, <code>?: etc</code>&rdquo; shall be forbidden, of cause, it does not allow use <code>for</code> or <code>while</code> loop to instead of conditional statement</li>
<li><strong>Follow &ldquo;</strong>Tell, don&rsquo;t ask&rdquo; principle**</li>
<li><strong>No loop</strong></li>
<li><strong>Keyboard only</strong>, no mouse, no touchpad</li>
<li><strong>Silent</strong>: all of the programmer shall be silent, no talking, it helps programmers use the source code and unit test case to make communication, test case and source code shall be readable</li>
</ul>


<h3>Step 3. Coding to solve the problem</h3>

<p>Actually, in coderetreat, we suggest every two programmers pair programming together, and in different sessions, the pair partner shall be rotated. Alice pair programming with Denial in session 1, but Alice shall pair programming with someone else. It helps programmers get new idea, and help them how to work with new partner. During coding, as facilitator shall walk through all of pair, to get to know what&rsquo;s the situation, is there any problem, if someone stuck there, facilitator can give a clue to help them keep going forward.</p>

<h3>Step 4. Debrief and share each other</h3>

<p>In each session, shall reserve at least 5~10 minutes to collect the feedback from participants. As facilitator, you can ask &ldquo;What&rsquo;s your feeling in this session?&rdquo;, &ldquo;Is there any problem you encounter, and how do you resolve it?&rdquo;, ask programmers write down the answers on the post-it, and paste them on the wall. and share each other. To facilitator, frequency quick feedback can help to adjust coming session&rsquo;s plan. To participants, it&rsquo;s a easy way to learn other&rsquo;s idea well.</p>

<p><img src="/images/2015-11-12-how-to-successfully-host-and-facilitate-coderetreat/session-type.jpg" width="400" title="session sharing" alt="Alt text" />
<img src="/images/2015-11-12-how-to-successfully-host-and-facilitate-coderetreat/session-sharing.jpg" width="400" title="share the idea" alt="Alt text" /></p>

<h2>4. As a host, what&rsquo;s shall be prepared before the day?</h2>

<p>As a host, you shall provide a comfortable workplace for programmers, so some logistics including:</p>

<ul>
<li>A good place</li>
<li>Nice table and chair</li>
<li>Food, snack and drinking</li>
</ul>


<p>Since in the activity, there are a lot of sharing to make, so below shall be prepare as well:</p>

<ul>
<li>Projector</li>
<li>Whiteboard</li>
<li>White paper</li>
<li>Marker pen</li>
<li>Post-it (more color)</li>
</ul>


<p>If you consider interact with other coderetreat place:</p>

<ul>
<li>Camera for live recorder</li>
<li>Audio device for live broadcast play</li>
</ul>


<p>Enroll you coderetreat on <a href="https://www.coderetreat.org" title="coderetreat.org">coderetreat website</a> , if you&rsquo;re going to organize a GDCR (Global Day of Coderetreat), please don&rsquo;t forget register it on <a href="http://gdcr.coderetreat.org/" title="gdcr">gdcr website</a>, and create you owned registration, and publish it for participants enroll. Of cause, if you registered your activity in the gdcr website, you will get support from administrator. Post your activity on twitter with tag &ldquo;#gdcr&rdquo;, &ldquo;#gdcr15&rdquo; or &ldquo;#coderetreat&rdquo; etc. for great promotion.</p>

<h2>5. As a facilitator, what&rsquo;s shall be focused on the sessions?</h2>

<p>Remember that: YOU ARE FACILITATOR. This is important role during the activity, your passion can inspire people enjoy the activity well.</p>

<ul>
<li>First of all, you shall understand the whole process of coderetreat,</li>
<li>Then understand the constraints well, you can explain every constraint,</li>
<li>Know the problem well, and solve the problem under the constraint before the activity start.</li>
<li>Before session, you shall clear delivery the requirements to participants, and inspire people</li>
<li>In in the session, you shall walk through the pair, and getting to know the status, and facilitate the programmers in the right way</li>
<li>In the end of the session, you shall use right tools to get enough feedback, and help participants share the idea each other.</li>
<li>In the coderetreat ending part (the last activity of whole day), you shall make whole day retrospective.</li>
</ul>


<p><img src="/images/2015-11-12-how-to-successfully-host-and-facilitate-coderetreat/ending-retrospective.jpg" title="retrospective in ending" alt="Alt text" /></p>

<h3>How to make whole day retrospective?</h3>

<p> Actually, there are three questions facilitator shall ask:</p>

<ol>
<li>What&rsquo;s your feeling today?</li>
<li>What&rsquo;s you learned today?</li>
<li>What are you going to do related coderetreat?</li>
</ol>


<p>You can split the participants in different groups, each group has 10 persons, give everyone three green color post-it, and write down the first question&rsquo;s answer, write down 3 feelings, and paste them on the white paper external circle, and then give each member 30 seconds to share his/her feeling one by one in the group.</p>

<p>Then give everyone two yellow post-it, and write down the second question&rsquo;s answer, write down 3 learning, and paste them on the white paper middle circle, share his/her learning one by one in the group.</p>

<p>In the end, give each person one red post-it, and write down the third question&rsquo;s answer, write down the action plan, and paste it on the white paper inner circle, share the action plan one by one in the group.</p>

<p><img src="/images/2015-11-12-how-to-successfully-host-and-facilitate-coderetreat/retrospective-way.jpg" title="retrospective way" alt="Alt text" /></p>

<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Does TeXstudio Support Chinese Words Edit in LaTeX Under Mac]]></title>
    <link href="http://blog.zhangliaoyuan.com/blog/2015/08/15/how-to-support-latex-chinese-editing-in-texstudio-under-mac/"/>
    <updated>2015-08-15T22:11:18+08:00</updated>
    <id>http://blog.zhangliaoyuan.com/blog/2015/08/15/how-to-support-latex-chinese-editing-in-texstudio-under-mac</id>
    <content type="html"><![CDATA[<p>These days, I&rsquo;m trying to edit some Chinese text documents edit in LaTeX language. It&rsquo;s not a problem in Windows since Chinese font support, and Windows OS is popular used in Chinese forum. For English supporting is not a problem in LaTeX, but Chinese edit problem I encounter under Mac OS. I&rsquo;m trying to make the notes to remember the steps here in case of somebody needs it as well.</p>

<h3>Step 1.  Choose good editor and compiler package</h3>

<p>As friend recommend, I used <a href="http://www.texstudio.org" title="texstudio">TeXstudio</a> for my LaTeX document editing, this tool was quite good when I used under Windows, I suppose it will do great job under Mac OS as well. And Install the <a href="http://www.tug.org/mactex/" title="mactex">MacTeX</a> the LaTeX compiling supporting.</p>

<h3>Step 2. Change the <code>PDFLaTeX</code> command to <code>XeLaTeX</code></h3>

<p>The first problem I encounter is when I finish a sample document editing, and tried to compile it, TeXstudio will use the default command <code>PDFLaTeX</code> to compile it. It works under PC, but failed under Mac system. So the first thing you need to set the default command to <code>XeLaTeX</code>.
In TeXstudio, you can change the option via &ldquo;Preferences&rdquo; -> &ldquo;Build&rdquo; -> &ldquo;Default compiler&rdquo;, select the value as <code>XeLaTeX</code>. Now if you compile this document, it works fine:
<code>LaTeX
\documentclass{article}
\title{Hello World}
\author{Mac}
\date{2015, July 4}
\begin{document}
    \maketitle
    This is my first sound.
\end{document}
</code>
and the result is like this:</p>

<p><img src="/images/2015-08-15-how-to-support-latex-chinese-editing-in-texstudio-under-mac/first-result.png" title="works well" alt="Alt text" /></p>

<h3>Step 3. Support Chinese words editing</h3>

<p>But if we change the English content to Chinese, it doesn&rsquo;t work well, such like this:
<code>LaTeX
\documentclass{article}
\title{你好，世界}
\author{Mac}
\date{2015, July 4}
\begin{document}
    \maketitle
    这是我呐喊出来的第一句话。
\end{document}
</code>
Except the English words can be displayed well, everything is mass, unreadable. So we need use <code>ctex</code> package to support it. so add the <code>\usepackage{ctex}</code> after <code>\documentclass{article}</code>, the result is still bad. So I realize the problem might be caused by the fonts supporting. And then I inserted these lines before <code>\begin{document}</code>, the document like this:
<code>LaTeX
\documentclass{article}
\usepackage{ctex}
\title{你好，世界}
\author{Mac}
\setCJKmainfont{Kaiti TC Regular}
\setCJKsansfont{Songti TC Regular}
\setCJKmonofont{Heiti TC Regular}
\date{2015, July 4}
\begin{document}
    \maketitle
    这是我呐喊出来的第一句话。
\end{document}
</code>
and change the encoding to <code>UTF-8</code></p>

<p><img src="/images/2015-08-15-how-to-support-latex-chinese-editing-in-texstudio-under-mac/encoding.png" width="500" title="select encoding" alt="Alt text" /></p>

<p>then the final result likes this:</p>

<p><img src="/images/2015-08-15-how-to-support-latex-chinese-editing-in-texstudio-under-mac/chinese-result.png" width="500" title="Chinese result" alt="Alt text" /></p>

<h3>Step 4. How do I know the font&rsquo;s name</h3>

<p>As you see, I insert these line about the font supporting, but you may ask why I know the Chinese font name. Yes, it&rsquo;s tricky, :p
Firstly, I installed Microsoft Office, and I open the Microsoft Word, you can find the font name from the font dropbox, after you selected a font, the font text box will show its name. See, that&rsquo;s why I know the font name exactly.</p>

<p><img src="/images/2015-08-15-how-to-support-latex-chinese-editing-in-texstudio-under-mac/font-select.png" width="400" title="font select" alt="Alt text" /></p>

<h3>In the eend</h3>

<p>Here I give an example of the Chinese words editing, hope it&rsquo;s useful for your reference.
&#8220;`LaTeX
\documentclass{ctexart}
%\usepackage{ctex}
\usepackage{xeCJK}
\setCJKmainfont{Kaiti TC Regular}
\setCJKsansfont{Songti TC Regular}
\setCJKmonofont{Heiti TC Regular}</p>

<p>\begin{document}</p>

<p>\tableofcontents</p>

<p>\begin{abstract}
这是在文件的开头的介绍文字.本文的主要话题的简短说明.
\end{abstract}</p>

<p>\section{ 前言 }
在该第一部分中的一些额外的元素可以被添加。巴贝尔包将采取的翻译服务.</p>

<p>\section{关于数学部分}
在本节中的一些数学会使用数学模型含中文字符显示。</p>

<p>這是一個傳統的中國文字</p>

<p>\end{document}
&#8220;`</p>

<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Ways to Break the Dependency During Unit Testing in C/C++ Programming]]></title>
    <link href="http://blog.zhangliaoyuan.com/blog/2015/05/15/thy-ways-to-break-the-dependency-during-unit-testing-in-c_c++-programming/"/>
    <updated>2015-05-15T23:01:06+08:00</updated>
    <id>http://blog.zhangliaoyuan.com/blog/2015/05/15/thy-ways-to-break-the-dependency-during-unit-testing-in-c_c++-programming</id>
    <content type="html"><![CDATA[<p>We encourage people writes unit testing shall follow <a href="http://agileinaflash.blogspot.de/2009/02/first.html" title="Fast, Isolated, Repeatable, Self-Validating and Timely">F.I.R.S.T principle</a>, but dependency gets in the way. Especially you make unit testing under legacy code, that&rsquo;s mess. That&rsquo;s the excuse we plan to ignore unit testing during coding.</p>

<p>For example, there is SUT code is <code>game.c</code>:</p>

<pre><code class="c++">bool is_win() {
    printf("is_win is invoked!\n");
    if (dice_points() &gt; 3) {
        return true;
    }
    return false;
}
</code></pre>

<p>function <code>is_win()</code> relies on the return value of function <code>dice_points()</code> which is defined in another file called <code>dice.c</code>:</p>

<pre><code class="c++">int dice_points() {
    printf("dice_points is invoked!\n");
    return rand() % 6 + 1;
}
</code></pre>

<p>If we would like to test <code>is_win()</code>, see the test case like this:</p>

<pre><code class="c++">TEST(VerifyGame, test_the_game_is_win) {
    CHECK(is_win());
}
</code></pre>

<p>The problem is you don&rsquo;t know the case will be pass or not, since the dependent function <code>dice_points()</code> return value is volatile, this test case is unrepeatable. So we need define a test double called <code>stub_dice_points()</code> to replace real implementation of <code>dice_points()</code>, and return a value which is configurable, like this:</p>

<pre><code class="c++">static int m_points = 0;

void set_stub_dice_points(int point){
    m_points = point;
}

int stub_dice_points() {
    return m_points;
}
</code></pre>

<p> And during you execute <code>is_win()</code> function, use <code>stub_dice_points()</code> instead of <code>dice_points()</code>, when you implement the unit testing like this:
<code>c++
 TEST (VerifyGame, test_bigger_than_three_points_shall_be_win) {
     set_stub_dice_points(3 + 2);
     CHECK(is_win());
}
</code>
But problem is how to replace the <code>dice_points()</code> with <code>stub_dice_points()</code>? There are some ways here:</p>

<h2>1. Pre-compile macro</h2>

<p>Macro <code>#ifdef</code>,  <code>#else</code> and <code>#endif</code> can be used during pre-compile phase, to select which source code statement can be compiled. So the SUT source code <code>game.c</code> can be modified like this:</p>

<pre><code class="c++">bool is_win() {
    printf("is_win is invoked!\n");
#ifndef UNIT_TEST
    if (dice_points() &gt; 3) {
#else
    if (stub_dice_points() &gt; 3) {
#endif
        return true;
    }
    return false;
}
</code></pre>

<p>And during compile the source code for unit testing purpose, give the <code>-DUNIT_TEST</code> compilation option, to enable the replacement. But this way requires you modify productive source code, and there will be a lot of macro like this, too ugly, and the source code readability will be getting worse.</p>

<h2>2. Function pointer replacement</h2>

<p>Another way is define a function pointer, in production code, the pointer is points a real depended function, and during unit testing, the function pointer will point the stub function, but it requires programmer change the production code like this， for example, the <code>dice.h</code> change like this:</p>

<pre><code class="c++">external int (*dice_pionts)();
</code></pre>

<p>and the <code>dice.c</code> change to this:</p>

<pre><code class="c++">int dice_points_imp() {
    printf("dice_points is invoked!\n");
    return rand() % 6 + 1;
}

int (*dice_pionts)() = dice_points_imp;
</code></pre>

<p>After that, in the test case, you can use the function pointer re-assignment like below (in cpputest framework):</p>

<pre><code class="c++">TEST(VerifyGame, test_the_dice_points_is_bigger_than_3_points_shall_be_win) {
    UT_PTR_SET(dice_points, stub_dice_points);
    set_stub_dice_points(3 + 2)
    CHECK(is_win());
}
</code></pre>

<p>The obvious disadvantage is production code changing is needed. You can image that, every function dependency shall be replaced by function pointer way, too ugly.</p>

<h2>3. Linker links replaced object</h2>

<p>Above two ways require to change the production code, is there any can avoid the production code change to complete the function replacement.
We assume the <code>game.c</code> includes <code>dice.h</code>, and <code>dice.c</code> is to implement the function <code>dice_ponits()</code> implementation. If we define another <code>stub.c</code> to implement the function <code>dice_points()</code> implementation in stub way. During compile the unit testing binary, don&rsquo;t compile the <code>dice.c</code>, just compile <code>game.c</code> and <code>stub.c</code>, and link them together to build a executable binary file.</p>

<p>But there will be another problem occurs: How many <code>*.c</code> files under testing, there will be how many unit testing executable binary files. But, if the function <code>is_win()</code> and <code>dice_points()</code> in the same file, how to replace it? It will be difficult.</p>

<h2>4. Dynamically replace</h2>

<p>Is there any way to replace the dependency without do any production code change? The answer is yes, here we would like to introduce a tricky way to replace the dependency: During the function invoking, we let the invoking jump to our defined stub function.
For example, during <code>isWin()</code> invoke <code>dice_points()</code>, we change the memory stack information, leads the invoking to jump to <code>stub_dice_points()</code>. The principle is first make the code page where <code>dice_points()</code> located writable using <code>mprotect()</code> in Linux or <code>VirtualProect()</code> in Win32. Then overwrite a <code>JMP</code> instructor which jump to <code>stub_dice_poinots()</code> at the begin of <code>dice_points()</code> binary code.</p>

<p>For example, there is a assistant source code <code>assistant.c</code> which includes <code>set_stup()</code> and <code>reset_stub()</code> implementation. The two are used to the dependency replacement:</p>

<pre><code class="c++">//assistant.h
#ifndef __ASSISTANT_H__
#define __ASSISTANT_H__

#ifdef __cplusplus
extern "C" {
#endif

#define JUMP_CODE_MAX   0x05
#define JUMP_CODE_CMD   0xE9
#define JUMP_CODE_RET   0xC3

typedef struct stubInfo {
  void *funcAddr;
  unsigned char byteCode[5];
} stubInfo;

extern void set_stub(void *funcAddr, void *stubAddr, stubInfo *si);
extern void reset_stub(stubInfo *si);
#ifdef __cplusplus
}
#endif
#endif /* __ASSISTANT_H__ */
</code></pre>

<p>And the <code>assistant.c</code> is here:</p>

<pre><code class="c++">#include &lt;sys/mman.h&gt;
#include &lt;unistd.h&gt;
#include "assistant.h"

static void set_jump_code(void *codeAddr, char jumpCode[JUMP_CODE_MAX]) {
  int pagesize = sysconf(_SC_PAGE_SIZE);
  if (mprotect((void*) ((unsigned long) codeAddr &amp; (~(pagesize - 1))), pagesize, PROT_READ | PROT_WRITE | PROT_EXEC) != 0) {
    return;
  }
  memcpy(codeAddr, jumpCode, JUMP_CODE_MAX);
}

void set_stub(void *funcAddr, void *stubAddr, stubInfo *si) {
    char jumpCode[JUMP_CODE_MAX] = {JUMP_CODE_CMD};
    int  dist = stubAddr - funcAddr - 5;

    memcpy((void *)&amp;jumpCode[1], (void *)&amp;dist, sizeof(void *));
    si-&gt;funcAddr = funcAddr;
    memcpy((void *)&amp;si-&gt;byteCode[0], (void *)funcAddr, JUMP_CODE_MAX);

    set_jump_code(funcAddr, jumpCode);
}

void reset_stub(stubInfo *si)
{
    char   jumpCode[JUMP_CODE_MAX];
    memcpy((void *)&amp;jumpCode, (void *)&amp;si-&gt;byteCode[0], JUMP_CODE_MAX);
    set_jump_code(si-&gt;funcAddr, jumpCode);
}
</code></pre>

<p>And then in the unit test file, you can use the assistant function for the dependency replacement:
<code>
TEST(VerifyGame, test_the_dice_points_is_bigger_than_3_points_shall_be_win) {
    stubInfo si;
    set_stup(dice_points, stub_dice_points, &amp;si);
    set_stub_dice_points(3 + 2);
    CHECK(is_win());
    reset_stub(&amp;si);
}
</code></p>

<h2>5. Inherit from abstract class, replaced in dependency injection way</h2>

<p>As we know, in OOP, there is interface concept, in C++, there is abstract class which used for interface purpose. If above the functions are defined as class way, there will be like this:</p>

<pre><code class="c++">//game.h
class Game {
public:
    bool isWin() {
        Dice dice;
        if (dice.points() &gt; 3) {
            return true;
        }
        return false;
    }
};
</code></pre>

<p>and the <code>dice</code> class is like this:
<code>
class Dice{
public:
    int points(){
        return rand() % 6 + 1;
    }
};
</code>
If we would like to make the replacement, we have to define an abstract class called <code>Player</code> like this:</p>

<pre><code class="c++">class Player{
public:
    int points() = 0;
};
</code></pre>

<p>And the class <code>Dice</code> inherits from <code>Player</code> like this:</p>

<pre><code class="c++">class Dice: public Player {
public:
    int points() {
        return rand() % 6 + 1;
    }
};
</code></pre>

<p>And the <code>Game</code> class shall make some change as well:</p>

<pre><code class="c++">class Game {
private:
    Player m_opponent;
public:
    Game(Player player) {
        m_opponent = player;
    }

    bool isWin(){
        if (m_opponent.points() &gt; 3){
            return true;
        }   
        return false;
    }
};
</code></pre>

<p>The constructor function is used to <a href="http://martinfowler.com/articles/injection.html" title="Inject">dependency injection</a>. In test purpose, we will inherit a new class called <code>StubDice</code> from abstract class <code>Player</code>, and use the <code>StubDice</code> replace the real <code>Dice</code> in test case:</p>

<pre><code class="c++">//stub_dice.h
class StubDice: public Player {
private:
    int m_points = 0;
public:
    void set_points(int points) {
        m_points = points;
    }
    int points() {
        return m_points;
    }
}
</code></pre>

<p>In the test case, the implementation as below:</p>

<pre><code class="c++">TEST(VerifyGame, test_the_dice_points_less_3_points_shall_be_lose) {
    StubDice stub;
    Game *game = new Game(stub);
    stub.set_points( 3 - 1);
    CHECK(!game-&gt;isWin());
}
</code></pre>

<h2>Summary</h2>

<p>We list the 5 ways of dependency breaking, it doesn&rsquo;t mean that we suggest you use the ways in unit testing. During unit testing, if we find that it&rsquo;s hard to make unit testing, we have to look back, check why it&rsquo;s too hard to implement unit testing. Is it the design problem? Is it too many dependency, why? Is there any other way to implement same requirements? Refactor your source code often, make it better.</p>

<p>Treat the unit testing as design tool, helps you make better design; treat unit testing as safety tools, facilitates you make source code change.</p>

<p>-EOF-</p>
]]></content>
  </entry>
  
</feed>
