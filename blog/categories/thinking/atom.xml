<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Thinking | Actionary]]></title>
  <link href="http://zhangliaoyuan.me/blog/categories/thinking/atom.xml" rel="self"/>
  <link href="http://zhangliaoyuan.me/"/>
  <updated>2015-02-06T15:48:50+08:00</updated>
  <id>http://zhangliaoyuan.me/</id>
  <author>
    <name><![CDATA[Eric Zhang]]></name>
    <email><![CDATA[zhang.lyuan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2B青年欢乐多之敏捷扫盲]]></title>
    <link href="http://zhangliaoyuan.me/blog/2014/09/02/talk-about-agile/"/>
    <updated>2014-09-02T23:12:00+08:00</updated>
    <id>http://zhangliaoyuan.me/blog/2014/09/02/talk-about-agile</id>
    <content type="html"><![CDATA[<p>其实，我有自知之明，我并不是最合适回答这个问题的人，因为现在大师有很多，不管是李奎也好，李鬼也罢，反正就是很多。也因为真假莫辩的原因，搞得圈里圈外各种叽叽喳喳。这不，要想在圈里圈外出个名什么的，要么旗帜鲜时的挺个流派，或者倒个敏捷，或挺或倒，一定要言辞凿凿，越激烈，越极端，就越容易博得点击量，当然，这是有风险的，要么名声大振，要么声誉扫地。其实我是挺偑服那些人的，多有勇气啊，而我就不行，只能闷头干活，不敢过多言语，为什么？怕讲错啊，万一被哪个神经病缠上，就我这压力承受能力，还不直接被K.O了。况且，就我这水平，能让自己搞明白就已经不错了。</p>

<p>可是，可是&hellip;由于工作的原因，最近我常常遇到不明真相的群众，直呼我张老师，然后请教诸这般那般。其实叫我张老师，我应得也自然，因为曾经当过老师，也乐得学生这么叫我。就我个人而言，我更愿意广义意义上就敏捷这个基础上就事论事。</p>

<p>讨论敏捷，肯定会提到敏捷宣言等等各种资料、引用、权威著作等等。但是这里水太深，一般人一时半会儿还真理解不了。那么，我想从我个人的理解试着说说，如果读者朋友觉得我说错了，也请给个comments，提醒一下，当然以后就称我为编程教练好了，如果你赞同的话，那以后就叫我为敏捷教练好了.</p>

<p>我觉得在敏捷里一个比较重要的概念就是Inspect&amp;Adapt，检视并适应。如果理解了这个概念，顺着往下理解，就很容易了。这里举个例子，有汽车驾驶经验的人一般都知道，从一个驾驶新手到熟练驾驶这个周期不会太长，一般每天上下班开车的话，一两个月就够了。作为在全国第二拥堵城市开车的我来说，从新手，到自认为老手，也就不到两个月，为什么会这么快呢？前两个月还战战兢兢，过两个月就敢跟别人卡车位，原因出在上班路上有太多的锻炼机会，从家里到单位，红绿灯几十个，十字路口N个，加上咱们国家特有的着急文化，路上状况百出，极其复杂，这样，给了我们学习足够的<strong>频度</strong>进行锻炼。另一个原因，汽车驾驶中，从做出每一个驾驶动作，到驾驶员获得<strong>反馈时间非常短</strong>，这样一个<strong>高频度</strong>和<strong>快反馈</strong>让我们很快获得了汽车驾驶能力的提升，因为，我们在驾驶过程中不停地做<strong>Inspect</strong>和<strong>Adapt</strong>。另一个例子是驾驶海上货轮，学习成本明显比汽车要高出许多，加上海上也没见多少红绿灯啊，<strong>频率低</strong>，货轮入港时的转舵，<strong>反馈周期长</strong>，也些原因决定了学习轮船驾驶要比汽车驾驶困难许多。由于不确定性因素，根据不断变化的情况，对反馈进行检视，然后对下一步的行动做出调整，以适应后续发展，快速的反馈减少我们应对单一反馈周期里的成本。应对不断变化的不确定因素，反馈是获得改进的唯一方式，这就不难理解&#8221;别人给你feedback是对你好&#8221;这句话了。</p>

<p><img src="/images/2014-09-02-talk-about-agile/inspect_adapt_cycle.png" title="Inspect &amp; Adapt" alt="Alt text" /></p>

<p>以此，我们对应软件开发中，软件开发常常碰到的问题是不确定因素很多，客户随时可能改变需求，这有点像开车，路况总是处在变化中，软件研发团队提交产品给客户，而客户将反馈给研发团队。如果想有效地应对来自客户的变化，那么保持一定频率的反馈及快速的反馈时间将有助于及时让团队做出调整，这样，不断的调整改善，对团队而言，就是一个持续改善的过程。我们试着问，要不断从客户那边获得反馈，前提就是要可持续地提交产品给客户，就这引入了Continuous Delivery的概念（我们不再这里深入更多细节），要做好Continuous Delivery，我们必须做好持续集成Continuous Integration，要做到持续集成，我们可以通过ATDD保证需求是可迭代的持续验证，并且同时做好测试自动化。要做好持续集成，咱们得做好持续开发编译，要做好持续开发编译，咱们都做好TDD，Pairing&hellip; 随着一步步向下挖掘，我们发现，可以将很多工程实践，放到里头，如果想保证这些事情能够顺利地做好，我们定义了不同的角色，不同的check list，backlog，这样就很容易地顺着这个思路去自圆其说了，:p。当然，这时还一个概念就是迭代周期，迭代周期就是开发团队用于Inspect &amp; Adapt的节奏。迭代周期多长合适呢？</p>

<p>从产品开发的这条线走，如上所述。那么要开发产品，团队很重要，从团队角度又可以引申到哪些概念呢？如团队建设要做到Continuous Improvement，那么我们是不是得做好Retrospective，然后是Daily Meeting， working agreement &hellip;</p>

<p><img src="/images/2014-09-02-talk-about-agile/concepts_links.png" title="Concepts Link" alt="Alt text" /></p>

<p>把这些想通了，再去顺着想别的概念就容易多了。当然，这不是敏捷的全部，否则做个大师就太容易了。这里只是想写个引子，帮助大家站在自己的角度来思考问题，希望能对大家有所帮助。对了，写到这里，我是不是得问几个问题：</p>

<ol>
<li>敏捷的开发方式好，还是传统瀑布模型好， 为什么？</li>
<li>如何在硬件研发中使用敏捷，为什么？</li>
<li>Lean与看板是什么关系，为什么？</li>
<li>Scrum好，还是Kanban好，为什么？</li>
<li>极限编程又是什么东西，为什么？</li>
<li>自组织是敏捷的前提还是结果，为什么？</li>
</ol>


<p>是不是觉得这些问题经常遇见，那为什么呢？习惯问为什么，并顺着往下想，下一篇博客你来写。</p>

<p><strong><em>注：文中图片是用keynote画的，只是个草图，如果有兴趣，大家帮忙给规整规整</em></strong></p>

<p>祝好</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[驱魔人 ——《软件驱魔术》译者序]]></title>
    <link href="http://zhangliaoyuan.me/blog/2014/02/24/translating-preface-of-software-exorcism/"/>
    <updated>2014-02-24T16:31:00+08:00</updated>
    <id>http://zhangliaoyuan.me/blog/2014/02/24/translating-preface-of-software-exorcism</id>
    <content type="html"><![CDATA[<p>从《画皮》里孙俪饰演的降魔人，《倩女悠魂》里古天乐饰演的猎妖师，到《西游》里年轻的驱魔人陈玄奘（文章饰）。不知道为什么，每个故事的驱魔工作者们无一例外，都是蓬头垢面，衣衫褴褛的造型。我一直在想，是什么样的工作性质，让他们如此狼狈不堪：爬高山，钻洞穴，寂寞伴身，学会守候&hellip;&hellip;</p>

<p>我本人所在项目的代码库里，包含了从上世纪八十年代到现在，跨度将近三十年的代码，这个样本都适合做代码考古了，而公司目前有几百人正在从事这套软件的维护工作，维护工作的绝大多数时间就是在与遗留代码战斗。他们需要深入代码洞穴，攀登代码树，在错综复杂的逻辑结构中跟踪每一步可能的分支结点；除了要抓到贻害一方的缺陷，并且还必须在有限的时间里完成这一切工作，这就像美剧里演的一样，一个人拿着枪指着你的头，掐着秒表，逼着你在秒表归零之前完成复杂的网络攻击任务。作者把软件维护工程师们比做软件驱魔人，这是多么贴切的比喻。我现在才惊醒，原来我身边的人本应如孙俪一样俊俏，像古天乐一样有型，似文章一般阳光清纯，而“伟大”的降妖除魔工作，却让他们一个个如降魔人，猎妖师和陈玄奘一般狼狈不堪。</p>

<p>最近听到一个真实的故事：有位1990年出生的女同事，为了解决一个BUG，不得不修改一段1993年编写的遗留代码。加班到晚上八九点之时，这位女同事大发感慨“当我还只有三岁的时候，就有一位怪叔叔写了一段代码，等20年后我长熟了再修改。” 在笑喷的同时，我们也在沉思，还有多少遗留代码是我们孩提时就已经存在，并且需要我们去修改的呢？或者，我们给正在成长的幼儿园宝宝们，又准备了多少的“遗产”呢？前人挖坑，后人填坑，子子孙孙无穷尽也，这会成为我们这些软件从业者的常态吗？</p>

<p>作者Bill Blunden试图通过<a href="http://www.apress.com/9781590592342" title="Software Exorcism"><em>Software Exorcism: A Handbook for Debugging and Optimizing Legacy Code</em></a>，告诉程序员们如何预防掉入软件维护的泥潭，冠冕点的说法，叫做从源头抓起。如果一旦进入缺陷的修改，如何进行调试，针对软件性能的提升，又有什么比较好的方法。从整本书的组织角度来看，条理性比较强。作者不求面面俱到，但从实用性的角度，还是给出了比较多的方法介绍和建议，如防御性编程，单元测试，软件跟踪，调试，优化，甚至调试器的内部实现，都有提及。本书非常适合初入软件维护队伍的从业者，对维护行列的老手来说，则会略觉浅显，但系统性的总结也是一个不错的参考。当然，对于编写软件的从业者来说，这也是一部值得学习的图书，第一部分关于如何预防，防止再次编写难于维护的代码就是不错的建议，同时，关于调优部分也一样受用。</p>

<p>在市面上各种编程语言介绍之类的图书大行其道的当下，这样一部专门讲授如何维护遗留代码的图书就显得异外扎眼。作者并没有提及太过高深的理论或技法，让人的感觉是更多的内容都是来自作者一线维护工作中的点点滴滴的经验总结。</p>

<p>参加本书翻译的几位译者都是IT从业人员，有着近十年的一线软件研发和维护经验，书中的描写更能引起一些共鸣，这也是我们将此书介绍给国内读者的初衷。当然，译者们翻译经验有限谴词造句难免会有出入或生涩之处，请读者批评指正，多多包涵。</p>

<p>感谢华章图书的编辑谢晓芳，及其耐心细致的编辑工作，她是我们见过的最有耐心的一位编辑，容忍我们一次又一次的延迟交稿，如果没有她这些可贵的品质，本书不可能出版。</p>

<p>感谢我们团队的小伙伴们，他们利用晚上的闲暇时光，帮助我们一起审读译稿，感谢公司给我们创造了一个开放宽松的学习实践环境，我们可以将书中所学传播到工作中，践行各种策略、方法和实践。</p>

<p>我们的小伙伴们：郑建琴，王刚，余鹰伟，周峰，凌建发，宓媛珊，吴恩平（排名不分先后），感谢你们。</p>

<p>译者</p>

<p>于杭州，
2014年下雪的春天
- End -</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bee Watcher]]></title>
    <link href="http://zhangliaoyuan.me/blog/2013/06/25/bee-watcher/"/>
    <updated>2013-06-25T17:31:00+08:00</updated>
    <id>http://zhangliaoyuan.me/blog/2013/06/25/bee-watcher</id>
    <content type="html"><![CDATA[<p>之前与<a href="http://www.weibo.com/u/1431854415" title="Terry's Weibo">Terry</a>一起聊天，聊到一个叫做<a href="http://www.drseussart.com/details/illustration/beewatcher.html" title="The Bee Watcher">Bee Watcher</a>的故事，觉得挺有意思的。话说，一位农场主为了提高蜂蜜的产量，他在资深顾问的建议下，请了一位看蜂人(Bee Watcher)，看蜂人的任务就是监督蜜蜂采蜜，以此来提高产量。可是实际情况是，蜜蜂并没有因为有了看蜂人的存在而改变采蜜的方法，它们还是按部就班的从一朵花飞到另一朵花，飞来飞去忙个不停。一年下来，产量没有提高，农场主认为产量没有提高的原因，是因为看蜂人看得不够努力，于是雇了一位看看蜂人(Bee Watcher Watcher)来监督看蜂人的工作，可是，有了看看蜂人，看蜂人还是像过去一样努力地盯着蜜蜂们忙来忙去，并没有因为有了看看蜂人，看蜂人就眼晴睁得更大点。一年又过去了，蜂蜜的产量还是没有提高，分析原因，农场主得出了结论是因为看看蜂人监督看蜂人监督蜜蜂采蜜不够努力，于是他又雇了名看看看蜂人(Bee Watcher Watcher Watcher)来监督看看蜂人监督看蜂人监督蜜蜂采蜜的工作。一年又一年，越来越多的看看看&hellip;看峰人(Bee Watcher Watcher &hellip;.. Watcher)，产量还是没有提高，而生产成本却一年比一年高。</p>

<p><img src="/images/2013-06-25/beewatcher_lg.gif" title="The Bee Watcher" alt="Alt text" /></p>

<p><em>picture from <a href="http://www.drseussart.com/details/illustration/beewatcher.html" title="The Bee Watcher">The Bee Watcher - The Art of Dr. Seuss</a></em></p>

<p>我很喜欢这个故事，不是因为绕口令一样的角色名字，而是让我发现了身边藏着的Bee Watcher。我们制定了一个Process，期望它能极大地改善我们的研发状况，可是发现不尽如人意，原因可能是Process执行得不到位，于是，我们制定了更多的Process来确保我们的Process能更好地得到执行。这难道不是一个Bee Watcher。你发现了吗？请将更多的Bee Watcher以Comments形式告诉我吧，对我而言，这一定会是一个不错的收获。:\</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exception Has Been Normal]]></title>
    <link href="http://zhangliaoyuan.me/blog/2013/05/30/exception-has-been-normal/"/>
    <updated>2013-05-30T18:31:00+08:00</updated>
    <id>http://zhangliaoyuan.me/blog/2013/05/30/exception-has-been-normal</id>
    <content type="html"><![CDATA[<p>My friend Simon talked with me, he would like to buy some instant coffee or ice cream in supermarket, but he found that, all of them including one ingredient is non-dairy creamer(植脂末). This ingredient is used to make the drink more smooth, it&rsquo;s a replacement of milk, but it&rsquo;s bad for human health. Any way, it&rsquo;s better than melamine(三聚氰胺). Nowadays, you are hard to find instant coffee without non-dairy in China.</p>

<p>Another story what I heard there is a government department named as &ldquo;temporary emergency processing center for cover of sewer well&rdquo; (窨井盖临时应急处理中心) is hiring a fixed officer. And as government perspective view, this department will be always existed even the name including &ldquo;temporary&rdquo;, the reason is they have to alwyas handle the &ldquo;temporary&rdquo; &amp; &ldquo;emergency&rdquo; issue. But as I know, the cover of sewer well shall be managed by municipal administration.</p>

<p>The third story is restrict the car to solve the traffic jam, i.e. if the last digit of your car license plate number is 1 or 9, your car will be ban on road on Monday, 2 or 8 will be ban on road on Tuesday, and so on&hellip;. This is a temporary solution for traffic jam issue, but currently, it&rsquo;s becoming a final solution, it&rsquo;s normal for administration department.</p>

<p>So we can understand from those stories, once problem happen, there will be temporary solution coming, in programming area, we called &ldquo;workaround&rdquo;, and there is no further analysis, and temporary solution will act as final solution, workaround will act as solution. Once there is another problem happen, there will be another temporary solution coming, or another &ldquo;workaround&rdquo; be used. A workaround helps to solve another workaround, and another workaround is used to solve another another workaround problem&hellip;.</p>

<p>But why? I often ask this question to myself and my colleague. It might be caused by lazy, yes, that&rsquo;s one reason. But another problem in government administration area, the temporary solution can solve some problems of employment, and there will be more position for officer ask, even it&rsquo;s not needed. In software programming area as well, more workaround, more maintenance is needed, and more engineers are needed. But all of us forget one thing is find out the root cause, and fix it.</p>

<p>If exception has been normal, around of you use workaround solve another problem of workaround, it means the situation around of you has been worse, you need to consider quit only if you can solve it. :\</p>
]]></content>
  </entry>
  
</feed>
